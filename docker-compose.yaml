version: "3.9"

services:

  worker:
    image: timurious/estimator:latest
    depends_on:
      - redis
    networks:
      - default
    entrypoint: ["rq", "worker", "--url", "redis://redis:6379"]
    deploy:
      resources:
        limits:
          cpus: '1'
      replicas: 6
      update_config:
        parallelism: 2
        delay: 10s
      #restart_policy:
      #  condition: on-failure


  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      #restart_policy:
      #  condition: on-failure
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - default

  dispatcher:
    image: timurious/estimator:latest
    depends_on:
      - redis
    entrypoint: [ "python3", "-m", "Estimator.dispatcher" ]
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      restart_policy:
        condition: on-failure
    volumes:
      - type: bind
        source: /Users/timur/Downloads/tmp2
        target: /data
    networks:
      - default

  listener:
    image: timurious/estimator:latest
    depends_on:
      - redis
    entrypoint: [ "python3", "-m", "Estimator.listener" ]
    deploy:
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      #restart_policy:
      #  condition: on-failure
    volumes:
      - type: bind
        source: /Users/timur/Downloads/tmp2
        target: /data
    networks:
      - default


# change device for your data storages, map estimator-input to folder with input data.json file, results will be
# stored in estimator-data mapped dir

#  esdata:
#    name: estimator-data
#    driver_opts:
#      type: none
#      o: bind
#      device: ${workdir}
#  esinput:
#    name: estimator-input
#    driver_opts:
#       type: volume
#       source: ${inputdir}

networks:
  default:
    name: redis_network